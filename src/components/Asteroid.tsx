/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useRef } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    rock001: THREE.Mesh;
  };
  materials: {
    Rock: THREE.MeshStandardMaterial;
  };
};

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("models/asteroid2.glb") as GLTFResult;
  const group = useRef<THREE.Group>(null!);
  useFrame((state) => {
    if (!group.current) return;
    const t = state.clock.getElapsedTime();
    group.current.rotation.set(
      Math.cos(t / 4) / 2,
      Math.sin(t / 4) / 2,
      Math.sin(t / 4) / 2
    );
  });
  return (
    <group {...props} dispose={null} ref={group}>
      <mesh
        name="rock001"
        castShadow
        receiveShadow
        geometry={nodes.rock001.geometry}
        material={materials.Rock}
        position={[-0.09, 0.22, 1.44]}
      />
    </group>
  );
}

useGLTF.preload("models/asteroid2.glb");
