// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// */

// import { useGLTF } from '@react-three/drei'
// import { useFrame } from '@react-three/fiber'
// import { useRef } from 'react'
// import * as THREE from 'three'

// const material = new THREE.MeshStandardMaterial({
//   color: new THREE.Color(0.2, 0.2, 0.2),
//   // emissive: new THREE.Color(1.8, 0, 0.3), // WHITE emissive COLOR
//   // emissiveIntensity: 2, // Intensity of emissive COLOR
// })

// const texture = new THREE.TextureLoader().load('/moonD.jpeg')
// material.map = texture

// export default function Model(props) {
//   const group = useRef<THREE.Group>(null!)
//   // @ts-ignore
//   const { nodes, materials } = useGLTF('/asteroid2.gltf')
//   console.log('ðŸš€ ~ file: Asteroid.tsx:23 ~ Model ~ nodes:', nodes)

//   useFrame((state) => {
//     if (!group.current) return
//     const t = state.clock.getElapsedTime()
//     group.current.rotation.set(
//       Math.cos(t / 8) / 2,
//       Math.sin(t / 8) / 2,
//       Math.sin(t / 8) / 2
//     )
//   })
//   return (
//     <group {...props} dispose={null} ref={group}>
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Scene.children[0].geometry}
//         material={material}
//       />
//     </group>
//   )
// }

// useGLTF.preload('/asteroid2.gltf')

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useRef } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    rock001: THREE.Mesh;
  };
  materials: {
    Rock: THREE.MeshStandardMaterial;
  };
};

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("models/asteroid2.glb") as GLTFResult;
  const group = useRef<THREE.Group>(null!);
  useFrame((state) => {
    if (!group.current) return;
    const t = state.clock.getElapsedTime();
    group.current.rotation.set(
      Math.cos(t / 4) / 2,
      Math.sin(t / 4) / 2,
      Math.sin(t / 4) / 2
    );
  });
  return (
    <group {...props} dispose={null} ref={group}>
      <mesh
        name="rock001"
        castShadow
        receiveShadow
        geometry={nodes.rock001.geometry}
        material={materials.Rock}
        position={[-0.09, 0.22, 1.44]}
      />
    </group>
  );
}

useGLTF.preload("models/asteroid2.glb");
